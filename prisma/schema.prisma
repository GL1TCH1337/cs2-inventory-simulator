//---------------------------------------------------------------------------------------------
//  Copyright (c) Ian Lucas. All rights reserved.
//  Licensed under the MIT License. See License.txt in the project root for license information.
//--------------------------------------------------------------------------------------------*/

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  @@id([id, domainId])
  authTokens ApiAuthToken[]
  avatar String
  caches UserCache[]
  createdAt DateTime @default(now())
  domain Domain? @relation(fields: [domainId], references: [id])
  domainId String @default("localhost")
  groups UserGroup[]
  id String
  inventory String?
  name String
  overwrites UserRule[]
  preferences UserPreference?
  syncedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCache {
  @@id([url, userId, domainId])
  args String?
  body String
  domainId String @default("localhost")
  timestamp DateTime
  url String
  user User @relation(fields: [userId, domainId], references: [id, domainId], onDelete: Cascade)
  userId String
}

model UserPreference {
  @@id([userId, domainId])
  background String?
  domainId String @default("localhost")
  hideFilters String?
  hideFreeItems String?
  language String?
  statsForNerds String?
  user User @relation(fields: [userId, domainId], references: [id, domainId], onDelete: Cascade)
  userId String
}

model ApiCredential {
  apiKey String @id
  authTokens ApiAuthToken[]
  comment String?
  createdAt DateTime @default(now())
  scope String?
  updatedAt DateTime @updatedAt
}

model ApiAuthToken {
  apiKey String
  createdAt DateTime @default(now())
  credential ApiCredential @relation(fields: [apiKey], references: [apiKey], onDelete: Cascade)
  domainId String @default("localhost")
  token String @id @default(uuid())
  user User @relation(fields: [userId, domainId], references: [id, domainId], onDelete: Cascade)
  userId String
}

model Rule {
  groupOverwrites GroupRule[]
  name String @id @unique
  type String @default("string")
  userOverwrites UserRule[]
  value String
}

model UserRule {
  @@id([name, userId, domainId])
  domainId String @default("localhost")
  name String
  rule Rule @relation(fields: [name], references: [name], onDelete: Cascade)
  user User @relation(fields: [userId, domainId], references: [id, domainId], onDelete: Cascade)
  userId String
  value String
}

model Group {
  id String @id
  overwrites GroupRule[]
  priority Int @default(0)
  users UserGroup[]
}

model UserGroup {
  @@id([groupId, userId, domainId])
  domainId String @default("localhost")
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  user User @relation(fields: [userId, domainId], references: [id, domainId], onDelete: Cascade)
  userId String
}

model GroupRule {
  @@id([groupId, name])
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  name String
  rule Rule @relation(fields: [name], references: [name], onDelete: Cascade)
  value String
}

model Domain {
  id String @id
  image String?
  expiresAt DateTime?
  users User[]
}
